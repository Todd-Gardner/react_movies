{"version":3,"sources":["components/Movie.js","components/VideoPreview.js","components/MovieDetails.js","App.js","reportWebVitals.js","index.js"],"names":["Movie","vote","title","poster_path","overview","vote_average","release_date","id","API_KEY","setMovieData","openModal","useState","movieInfo","setMovieInfo","getMovieDetails","a","MOVIE_DETAILS","fetch","response","json","movieData","console","log","className","onClick","src","alt","substring","VideoPreview","videoKey","url","controls","MovieDetails","credits","videos","releaseDate","IMAGE_API","actorList","setActorList","setVideoKey","useEffect","cast","length","topActors","forEach","actorDetails","name","character","profilePic","profile_path","push","results","ytKey","find","video","index","site","type","key","map","actor","REACT_APP_TMDB_API_KEY","process","FEATURED_API","SEARCH_API","App","movies","setMovies","searchInput","setSearchInput","modalOpen","setModalOpen","getMovies","API","filteredMovies","filter","movie","placeholder","value","onChange","e","target","toggleModal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b87e1ec9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst IMAGE_API = `https://image.tmdb.org/t/p/w1280`;\r\n\r\nconst setVoteClass = (vote) => {\r\n  if (vote >= 7.5) {\r\n    return \"green\";\r\n  } else if (vote >= 5) {\r\n    return \"yellow\";\r\n  } else {\r\n    return \"red\";\r\n  }\r\n};\r\n\r\nconst Movie = ({\r\n  title,\r\n  poster_path,\r\n  overview,\r\n  vote_average,\r\n  release_date,\r\n  id,\r\n  API_KEY,\r\n  setMovieData,\r\n  openModal,\r\n}) => {\r\n  // const [actorList, setActorList] = useState([]);\r\n  const [movieInfo, setMovieInfo] = useState([]);\r\n\r\n  // Will be in seperate Component...\r\n  const getMovieDetails = async (id, API_KEY) => {\r\n    // Maybe add /movie/${id}/watch/providers (append?) in future\r\n    const MOVIE_DETAILS = `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&append_to_response=videos,credits`;\r\n\r\n    const response = await fetch(MOVIE_DETAILS);\r\n    const movieData = await response.json();\r\n    console.log(`movieData`, movieData);\r\n    setMovieInfo(movieData);\r\n    setMovieData(movieData);\r\n    openModal(movieInfo.id);\r\n  };\r\n\r\n  // right here... need to extract the youtube key maybe set 'movieDetails/Data on HOVER\r\n  //  maybe do in the main app cmpt when all the movies load...\r\n\r\n  // Will be in seperate Component\r\n  // const getTrailer = async (key) => {\r\n  //   const YOUTUBE_API = `https://www.youtube.com/watch?v=${key}`;\r\n  //   console.log(`movieInfo`, movieInfo);\r\n  //   const videos = await movieInfo.videos.results;\r\n  //   console.log(`videos`, videos);\r\n  // };\r\n  const showDetails = () => {};\r\n\r\n  return (\r\n    <div\r\n      className=\"movieCard\"\r\n      onClick={() => {\r\n        getMovieDetails(id, API_KEY); //.then(openModal(id));\r\n      }}\r\n    >\r\n      <div className=\"movie\">\r\n        <img\r\n          src={\r\n            poster_path\r\n              ? IMAGE_API + poster_path\r\n              : \"https://images.unsplash.com/photo-1533488765986-dfa2a9939acd?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=967&q=80\"\r\n          }\r\n          alt={title}\r\n        />\r\n        <div className=\"movieInfo\">\r\n          <h3>\r\n            {title}({release_date.substring(0, 4)})\r\n          </h3>\r\n          <span className={`tag ${setVoteClass(vote_average)}`}>\r\n            {vote_average}\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"movieOverview\">\r\n          <h2>{title}</h2>\r\n          <p>{overview}</p>\r\n          <button onClick={() => showDetails()}>Movie Details + Trailer</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport YouTubePlayer from \"react-player/youtube\";\r\n\r\n// The movie display (to be a modal...?)\r\nconst VideoPreview = ({ videoKey }) => {\r\n  const youTube_API = \"https://www.youtube.com/watch?v=\";\r\n  //let key = videoKey || \"BdJKm16Co6M\";\r\n  // const [trailer, setTrailer] = useState();\r\n  // useEffect(() => {\r\n  //   preview(youTube_API, videoKey);\r\n  // }, []);\r\n  // const preview = async (youTube_API, videoKey) => {\r\n  //   const response = await fetch(youTube_API + videoKey, {\r\n  //     headers: {\r\n  //       \"Content-Type\": \"text/html\",\r\n  //     },\r\n  //     mode: \"no-cors\",\r\n  //     //  'Access-Control-Allow-Origin' : '*'\r\n  //   });\r\n  //   const data = await response;\r\n  //   console.log(`data`, data);\r\n  //   setTrailer(data);\r\n  //};\r\n\r\n  return (\r\n    <div className=\"video\">\r\n      <YouTubePlayer\r\n        className=\"videoPlayer\"\r\n        url={ `${youTube_API}${videoKey}` }\r\n        controls={1}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoPreview;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport VideoPreview from \"./VideoPreview\";\r\n\r\n// The movie display modal\r\nconst MovieDetails = ({\r\n  credits,\r\n  videos,\r\n  title,\r\n  overview,\r\n  releaseDate,\r\n  poster_path,\r\n}) => {\r\n  const IMAGE_API = `https://image.tmdb.org/t/p/w1280`; //also im Movies.js\r\n\r\n  const [actorList, setActorList] = useState();\r\n  const [videoKey, setVideoKey] = useState();\r\n\r\n  useEffect(() => {\r\n    if (credits.cast.length > 0) {\r\n      const cast = credits.cast;\r\n      console.log(`cast`, cast);\r\n\r\n      // Get top n actors\r\n      let topActors = [];\r\n      cast.forEach((cast) => {\r\n        if (topActors.length < 10) {\r\n          const actorDetails = {\r\n            id: cast.id,\r\n            name: cast.name,\r\n            character: cast.character,\r\n            profilePic: cast.profile_path,\r\n          };\r\n          topActors.push(actorDetails);\r\n        }\r\n      });\r\n      setActorList(topActors);\r\n    }\r\n\r\n    // Find the 'YouTube video trailer' - if none, display the poster\r\n    if (videos.results.length > 0) {\r\n      const videoResults = videos.results;\r\n\r\n      const video = videoResults.find((video, index) => {\r\n        if (video.site === \"YouTube\" && video.type === \"Trailer\") {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      });\r\n      const ytKey = video.key;\r\n      setVideoKey(ytKey);\r\n    } else {\r\n      // no video, show poster instead....\r\n      setVideoKey(\"\");\r\n    }\r\n  }, [credits, videos]);\r\n\r\n  return (\r\n    <div className=\"detailsContainer\">\r\n      <h2>\r\n        {title}({releaseDate.substring(0, 4)})\r\n      </h2>\r\n      <div className=\"movieDetails\">\r\n        <div className=\"movieDescription\">{overview}</div>\r\n        {videoKey ? (\r\n          <VideoPreview videoKey={videoKey} />\r\n        ) : (\r\n          <div className=\"moviePoster\">\r\n            <img\r\n              src={\r\n                { poster_path }\r\n                  ? IMAGE_API + poster_path\r\n                  : \"https://images.unsplash.com/photo-1533488765986-dfa2a9939acd?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=967&q=80\"\r\n              }\r\n              alt={title}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"actorInfoContainer\">\r\n        {actorList &&\r\n          actorList.map((actor) => {\r\n            return (\r\n              <div className=\"actorInfo\" key={actor.id}>\r\n                {/* {actor.character}\r\n                <br />\r\n                Played by: */}\r\n                {actor.name}\r\n                <img\r\n                  src={\r\n                    actor.profilePic\r\n                      ? IMAGE_API + actor.profilePic\r\n                      : \"https://images.unsplash.com/photo-1616582607004-eba71ce01e07?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=639&q=80\"\r\n                  }\r\n                  alt=\"profile\"\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MovieDetails;\r\n","import React, { useState, useEffect } from \"react\";\n\nimport Movie from \"./components/Movie\";\nimport MovieDetails from \"./components/MovieDetails\";\n// get API key from local .env\nconst { REACT_APP_TMDB_API_KEY } = process.env;\n\n// list of tmdb API urls\nconst FEATURED_API = `https://api.themoviedb.org/3/discover/movie?sort=popularity.desc&api_key=${REACT_APP_TMDB_API_KEY}&page=1`;\nconst SEARCH_API = `https://api.themoviedb.org/3/search/movie?&api_key=${REACT_APP_TMDB_API_KEY}&language=en-US&query=`;\n// const IMAGE_API = `https://image.tmdb.org/t/p/w1280`;\n// const TRAILER = ``;\n\n// use append_to_response to get more data using a single http request (API call). Use movie id:\n// https://api.themoviedb.org/3/movie/157336?api_key=${REACT_APP_TMDB_API_KEY}&append_to_response=videos,images\n\n// search movies, tv and actors:\n// https://api.themoviedb.org/3/search/multi?api_key=${REACT_APP_TMDB_API_KEY}&language=en-US&page=1&include_adult=false\n// https://api.themoviedb.org/3/search/multi?api_key=${REACT_APP_TMDB_API_KEY}&language=en-US&query=jennifer&page=1\n\n//TODO:\n// refactor (ie. movieCard, moviesContainer etc)\n// change movie search to include actors in results\n// add actor name/link to the details card(s). Link will search actors other movies\n// FIX: or get rid of form onSubmit. Not displaying results before clearing field -> because onChange defaults to featured movies...\n// CHANGE: header etc into own component(s)\n// ADD: Context so not raising state\n// ADD: Router - react-router-dom (BrowserRouter or HashRouter if on gh-pages)\n// MAYBE: change display to rows with featured, top rated, favorites sections. If do this have movie preview at top of page (not modal) on desktop. keep modal on mobile\n// if adding favorites, will need to set up a database to save them\n// MAYBE: change the movie description to flip the card to display rather then sliding up onto the card OR make poster image resize so both are visible\n// DEPLOY: to gh-pages or to netlify / heroku(if adding backend)\n// *** make sure env variables aren't being seen. Need to add server or do on back end? ***\n// -----\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [movieData, setMovieData] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n\n  // get initial list of movies on loading\n  useEffect(() => {\n    getMovies(FEATURED_API);\n  }, []);\n\n  // auto-search for movies when search input changes\n  useEffect(() => {\n    if (searchInput.length >= 3) {\n      getMovies(SEARCH_API + searchInput);\n    } else {\n      // does this make too many calls? Save featured to local storage first?\n      // see below for possible solution\n      getMovies(FEATURED_API);\n    }\n  }, [searchInput]);\n\n  async function getMovies(API) {\n    const response = await fetch(API);\n    const movieData = await response.json();\n\n    // Remove movies with a 0 rating\n    const filteredMovies = movieData.results.filter(\n      (movie) => movie.vote_average > 0\n    );\n    console.log(`filteredMovies`, filteredMovies);\n\n    setMovies(filteredMovies);\n  }\n\n  // Only need the onSubmit if not using the 'auto-search'\n  // NEED to modify! This sets input to \"\" - the auto-search shows Featured if less than 3 characters!\n  // const handleOnSubmit = (e) => {\n  //   e.preventDefault();\n\n  //   if (searchInput) {\n  //     getMovies(SEARCH_API + searchInput);\n  //     setSearchInput(\"\");\n  //   }\n  // };\n\n  const toggleModal = (id) => {\n    // **FIX** first movie takes 2 clicks to open\n    if (id === movieData.id) {\n      setModalOpen((modalOpen) => !modalOpen);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      {/* change header to a Search component */}\n      <header>\n        <form /*onSubmit={handleOnSubmit}*/>\n          <input\n            className=\"searchBar\"\n            placeholder=\"Search movies...\"\n            value={searchInput}\n            // onChange={onChangeHandler}\n            onChange={(e) => setSearchInput(e.target.value)}\n          />\n        </form>\n      </header>\n      {modalOpen && (\n        <MovieDetails\n          releaseDate={movieData.release_date}\n          overview={movieData.overview}\n          credits={movieData.credits}\n          videos={movieData.videos}\n          title={movieData.title}\n          poster_path={movieData.poster_path}\n          //movieData={movieData}\n        />\n      )}\n      <div className=\"movieContainer\">\n        {/* <VideoPreview videoKey=\"HqzWCNbX_wg\" /> */}\n        {/* {modalOpen ? (\n          <MovieDetails\n            releaseDate={movieData.release_date}\n            overview={movieData.overview}\n            credits={movieData.credits}\n            videos={movieData.videos}\n            title={ movieData.title }\n            poster_path={movieData.poster_path}\n            //movieData={movieData}\n          />\n        ) : (\n          \"modal\"\n        )} */}\n        {movies.length > 0 ? (\n          movies.map((movie) => (\n            <Movie\n              key={movie.id}\n              API_KEY={REACT_APP_TMDB_API_KEY}\n              {...movie}\n              setMovieData={(movieData) => {\n                setMovieData((movieData, movieData));\n              }}\n              openModal={(id) => toggleModal(id)}\n            />\n          ))\n        ) : (\n          <div>Sorry, no matches found.</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// Maybe use onchangeHandler for performance (less rerenders?)\n// const onChangeHandler = (e) => {\n//   setSearchInput(e.target.value);\n//   if (e.target.value.length > 3) {\n//     getMovies(SEARCH_API + searchInput);\n//     // for using promise, not async/await\n//     // fetch(SEARCH_API + searchInput)\n//     //   .then((res) => res.json())\n//     //   .then((data) => setMovies(data.results));\n//   }\n// };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}